# Generated by Django 4.2.7 on 2025-08-15 07:07

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlanResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('unlock_after_days', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(max_length=500)),
                ('icon', models.CharField(default='ðŸ“š', max_length=50)),
                ('color', models.CharField(default='#6366f1', max_length=7)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Resource Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WellnessResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(max_length=1000)),
                ('content', models.TextField(help_text='Main content of the resource')),
                ('resource_type', models.CharField(choices=[('article', 'Article'), ('video', 'Video'), ('audio', 'Audio/Podcast'), ('exercise', 'Exercise/Worksheet'), ('meditation', 'Guided Meditation'), ('tool', 'Interactive Tool'), ('course', 'Online Course'), ('book', 'Book Recommendation')], max_length=20)),
                ('tags', models.JSONField(default=list, help_text='List of tags for filtering')),
                ('thumbnail', models.URLField(blank=True, help_text='Thumbnail image URL')),
                ('video_url', models.URLField(blank=True, help_text='YouTube or Vimeo URL')),
                ('audio_url', models.URLField(blank=True, help_text='Audio file or streaming URL')),
                ('file_attachment', models.URLField(blank=True, help_text='PDF or other downloadable file')),
                ('external_link', models.URLField(blank=True, help_text='External resource link')),
                ('author', models.CharField(blank=True, max_length=200)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('reading_time_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='library.resourcecategory')),
            ],
            options={
                'ordering': ['-is_featured', '-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WellnessPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(max_length=1000)),
                ('plan_type', models.CharField(choices=[('daily', 'Daily Practice'), ('weekly', 'Weekly Program'), ('challenge', '30-Day Challenge'), ('course', 'Learning Course'), ('crisis', 'Crisis Support')], max_length=20)),
                ('estimated_duration_days', models.PositiveIntegerField()),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('enrollment_count', models.PositiveIntegerField(default=0)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resources', models.ManyToManyField(through='library.PlanResource', to='library.wellnessresource')),
            ],
            options={
                'ordering': ['-is_featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=500)),
                ('max_members', models.PositiveIntegerField(default=20)),
                ('start_date', models.DateField()),
                ('is_private', models.BooleanField(default=False)),
                ('join_code', models.CharField(max_length=10, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('members', models.ManyToManyField(related_name='study_groups', to=settings.AUTH_USER_MODEL)),
                ('moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_moderated_groups', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='library.wellnessplan')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='planresource',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.wellnessplan'),
        ),
        migrations.AddField(
            model_name='planresource',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.wellnessresource'),
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('bookmarked', models.BooleanField(default=False)),
                ('liked', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, max_length=1000)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.wellnessresource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
                'unique_together': {('user', 'resource')},
            },
        ),
        migrations.CreateModel(
            name='ResourceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('review_text', models.TextField(blank=True, max_length=1000)),
                ('helpfulness_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='library.wellnessresource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'resource')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='planresource',
            unique_together={('plan', 'resource')},
        ),
        migrations.CreateModel(
            name='PlanEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('current_day', models.PositiveIntegerField(default=1)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.wellnessplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-enrolled_at'],
                'unique_together': {('user', 'plan')},
            },
        ),
    ]
